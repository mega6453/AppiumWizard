name: .NET Core Desktop

on:
  push:
    branches: [ "testyml" ]
  pull_request:
    branches: [ "testyml" ]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Release]
    runs-on: windows-latest
    env:
      Solution_Name: Appium Wizard

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        
    # - name: Install Git LFS
    #   run: |
    #     git lfs install --skip-smudge
    #     git lfs fetch --all
    #     git lfs checkout
    #   shell: bash
      
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    - name: Build the solution
      run: msbuild $env:Solution_Name /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # - name: Upload build artifacts
    #   id: upload-artifacts
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: Build Outputs
    #     path: D:/a/AppiumWizard/AppiumWizard/Appium Wizard/bin
    #     compression-level: 9

    - name: Install Chocolatey
      run: |
        Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))

    - name: Install Inno Setup
      run: |
        choco install innosetup -y

    # - name: Compile and generate EXE file
    #   run: |
    #     ISCC /Q "${{ env.SCRIPT_PATH }}"
    #   env:
    #     SCRIPT_PATH: "D:/a/AppiumWizard/AppiumWizard/Appium Wizard/bin/Release/net6.0-windows/ExcludeInInstaller/Installer Script.iss"  
  
    # - name: Upload build artifacts 2
    #   id: upload-artifacts2
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: Build Outputs
    #     path: "D:/a/AppiumWizard/AppiumWizard/Appium Wizard/bin/Release/net6.0-windows/output"
    #     compression-level: 9

    - name: Download File
      run: |
          Set-Location -Path "Appium Wizard/bin/Release/net6.0-windows/Resources/iOS/"
          Invoke-WebRequest -Uri "https://github.com/mega6453/SignIPAInWindows/releases/download/firstrelease/AppiumWizardDistro.vhdx" -OutFile "AppiumWizardDistro.vhdx"
    
    - name: Compile and generate EXE file
      run: |
        ISCC /Q "${{ env.SCRIPT_PATH }}"
      env:
        SCRIPT_PATH: "Appium Wizard/bin/Release/net6.0-windows/ExcludeInInstaller/Installer Script.iss"  

    # - name: Upload build artifacts
    #   id: upload-artifacts
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: Build Outputs
    #     path: "Appium Wizard/bin/Release/net6.0-windows/output"
    #     compression-level: 9  
        
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        files: "Appium Wizard/bin/Release/net6.0-windows/output/AppiumWizard.exe"
        tag_name: v1.0.0
        release_name: Release 1.0.0
        body: |
          Release version 1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.APPIUMWIZARD_TOKEN }}

    # - name: Upload Release Asset
    #   id: upload-release-asset
    #   uses: actions/upload-release-asset@v1.0.2
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.APPIUMWIZARD_TOKEN }}
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }}
    #     asset_path: "Appium Wizard/bin/Release/net6.0-windows/output/Appium Wizard.exe"
    #     asset_name: "Appium Wizard.exe"
    #     asset_content_type: "application/octet-stream"

      
    # - name: Set Asset Name
    #   id: set_asset_name
    #   run: echo "::set-output name=asset_name::$(node -p 'encodeURIComponent("Appium Wizard.exe")')"
    #   shell: bash

    # - name: Upload Release Asset
    #   id: upload-release-asset
    #   uses: actions/upload-release-asset@v1.0.2
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.APPIUMWIZARD_TOKEN }}
    #     ASSET_NAME: ${{ steps.set_asset_name.outputs.asset_name }}
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }}
    #     asset_path: "Appium Wizard/bin/Release/net6.0-windows/output/Appium Wizard.exe"
    #     asset_name: ${{ env.ASSET_NAME }}
    #     asset_content_type: "application/octet-stream"


    # - name: Upload Release Asset
    #   id: upload-release-asset
    #   uses: actions/upload-release-asset@v1.0.2
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.APPIUMWIZARD_TOKEN }}
    #   with:
    #    upload_url: ${{ steps.create_release.outputs.upload_url }}
    #    asset_path: "Appium Wizard/bin/Release/net6.0-windows/output/Appium Wizard.exe"
    #    asset_name: "Appium Wizard.exe"
    #    asset_content_type: "application/octet-stream"  
        
    # - name: Download EXE file
    #   uses: actions/download-artifact@v2
    #   with:
    #     name: Build Outputs
    #     path: "D:/a/AppiumWizard/AppiumWizard/Appium Wizard/bin/Release/net6.0-windows/output"
    # - name: List downloaded EXE file
    #   run: |
    #     ls "D:/a/AppiumWizard/AppiumWizard/Appium Wizard/bin/Release/net6.0-windows/output"
