; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Appium Wizard"
#define MyAppVersion "1.0.0"
#define MyAppPublisher "Meganathan C"
#define MyAppExeName "Appium Wizard.exe"

[Setup]
AlwaysRestart = yes 
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{408E2B01-BCF1-40E3-8F27-F11B32572D03}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
DefaultDirName={autopf}\{#MyAppName}
DisableDirPage=yes
DisableProgramGroupPage=yes
LicenseFile=License.txt
InfoBeforeFile=Information.txt
SetupIconFile=appiumlogo.ico
; Remove the following line to run in administrative install mode (install for all users.)
PrivilegesRequired=lowest
OutputDir=..\output
OutputBaseFilename=AppiumWizard
Compression=lzma
SolidCompression=yes
WizardStyle=modern

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "..\{#MyAppExeName}"; DestDir: "{app}"; Flags: ignoreversion
Source: "..\Resources\*"; DestDir: "{app}\Resources\"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "..\runtimes\*"; DestDir: "{app}\runtimes\"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "..\*"; DestDir: "{app}"; Flags: ignoreversion
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Code]
var
  ProgressPage: TOutputProgressWizardPage;

function GetWindowsAppsPath: string;
var
  Username: string;
begin
  // Get the current user's username
  Username := GetUserNameString;

  // Construct the path to the WindowsApps folder
  Result := 'C:\Users\' + Username + '\AppData\Local\Microsoft\WindowsApps';
end;

function IsAppiumInstalled: Boolean;
var
  AppiumPath: string;
begin
  AppiumPath := ExpandConstant('{userappdata}\npm\appium.cmd');
  Result := FileExists(AppiumPath);
end;

procedure InitializeWizard;
begin
  // Create a custom progress page
  ProgressPage := CreateOutputProgressPage('Installing', 'Please wait while Installing WSL, Node.js, Appium Server and Appium drivers. Please provide necessary permission when system prompts.');
  ProgressPage.SetProgress(0, 100);
end;

function NextButtonClick(CurPageID: Integer): Boolean;
var
 ResultCode: Integer;
  ErrorCode: Integer;
  AppiumPath: string;
  WindowsAppsPath: string;
  Progress: Integer;
begin
  Result := True;

  if CurPageID = wpReady then
  begin
    // Display the message box
    if MsgBox('Please provide necessary permissions when system prompts for proper installation.', mbInformation, MB_OKCANCEL) = IDOK then
    begin
      // Run the winget command to install Node.js silently
      // for my reference - SW_HIDE - to hide the window, SW_SHOWNORMAL - to show the window
      ProgressPage.Show;
      ProgressPage.SetText('Installing Node.js...','');
      WindowsAppsPath := GetWindowsAppsPath; 
      if not FileExists(WindowsAppsPath + '\winget.exe') then
      begin
        MsgBox('The winget.exe file was not found.', mbError, MB_OK);
        Result := False;
        Exit;
      end;
      
    if not RegKeyExists(HKCU, 'Software\Node.js') then
      if not Exec(WindowsAppsPath + '\winget.exe', 'install OpenJS.NodeJS.LTS --accept-package-agreements --accept-source-agreements', '', SW_HIDE, ewWaitUntilTerminated, ResultCode) then
      begin
        MsgBox('Failed to install Node.js using winget. Error code: ' + IntToStr(ResultCode), mbError, MB_OK);
        Result := False;
        Exit;
      end;

      Progress := 20;
      ProgressPage.SetProgress(Progress, 100);
    if not IsAppiumInstalled then
    begin
      // Add the command to install Appium globally using npm
      ProgressPage.SetText('Installing Appium Server...','');
      if not Exec('cmd', '/C "C:\Program Files\nodejs\npm" install -g appium', '',  SW_HIDE, ewWaitUntilTerminated, ErrorCode) then
      begin
        MsgBox('Failed to install Appium globally. After installation completed, Run Appium Wizard to retry the appium installation.', mbError, MB_OK);
        Result := False;
        Exit;
      end;
    end;
      Progress := 40;
      ProgressPage.SetProgress(Progress, 100);

      // Get the full path to the appium executable
      AppiumPath := '"' + ExpandConstant('{userappdata}\npm\appium.cmd') + '"';

      // Install Appium drivers
      ProgressPage.SetText('Installing XCUITest driver for iOS...','');
      if not Exec('cmd', '/C "' + AppiumPath + ' driver install xcuitest"', '',  SW_HIDE, ewWaitUntilTerminated, ErrorCode) then
      begin
        MsgBox('Failed to install XCUITest. After installation completed, Run Appium Wizard to retry the xcuitest installation.', mbError, MB_OK);
        Result := False;
        Exit;
      end;
      Progress := 60;
      ProgressPage.SetProgress(Progress, 100);

      ProgressPage.SetText('Installing UIAutomator2 driver for Android...','');
      if not Exec('cmd', '/C "' + AppiumPath + ' driver install uiautomator2"', '',  SW_HIDE, ewWaitUntilTerminated, ErrorCode) then
      begin
        MsgBox('Failed to install UIAutomator2. After installation completed, Run Appium Wizard to retry the UIAutomator2 installation.', mbError, MB_OK);
        Result := False;
        Exit;
      end;
      Progress := 80;
      ProgressPage.SetProgress(Progress, 100);

      ProgressPage.SetText('Installing WSL (for iOS app signing), Please provide necessary permission when system prompts...','');
      if not Exec('cmd', '/C C:\Windows\Sysnative\wsl.exe --install --no-distribution', '', SW_HIDE, ewWaitUntilTerminated, ErrorCode) then
      begin
        MsgBox('Failed to install WSL.', mbError, MB_OK);
        Result := False;
        Exit;
      end;
      Progress := 100;
      ProgressPage.SetProgress(Progress, 100);         
      //ProgressPage.SetText('Installation completed!','');
      //MsgBox('Please Restart the system and Launch Appium Wizard.', mbInformation, MB_OK);
      Result := True;   
      progressPage.Hide;
    end
    else
    begin
      Result := False;
    end;
  end;
end;


[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

